# p3_server.srp -- a test program to receive from donttouchosc.srp and
#                  other OSC sources
#
# Gus Xia and Roger Dannenberg
# Feb 14, 2014
# modified for O2, Feb 2017

# run this with serpent or serpent64 (not wxserpent)
#
# this program demostrates receiving OSC messages from a client,
# specifically the wxserpent program donttouchosc.srp.

require "debug"

# This is the O2 application name. Only O2 processes with the same
# application name and same local area network can communicate, so
# we make the application name easy to change.
APPLICATION = "p3"

# Similarly, we make the service name easy to change here so that
# this program can be modified to offer any O2 service. Note that
# service names are assumed to be unique, so if you try to "snoop"
# on messages to another service, you may interfere with that service.
SERVICE = "p3"

def full(osc_path)
    # make a full O2 path based on SERVICE
    return "/" + SERVICE + osc_path


o2_initialize(APPLICATION, false)
o2_service_new(SERVICE)
// o2_debug_flags("O")
o2_clock_set()
PORT = 8001
rslt = o2_osc_port_new("p3", PORT, false)
if rslt != 0 // an error occurred
    display "in p3_server, o2_osc_port_new returned ERROR", rslt
else
    print "Listening for TouchOSC messages on port", PORT

### donttouchosc.srp sends to /p3/cmsip/*, so we install handlers
### for donttouchosc.srp here...
o2_method_new(full("/cmsip/buttonA"), "f", 'buttonA', true)
o2_method_new(full("/cmsip/buttonB"), "f", 'buttonB', true)
o2_method_new(full("/cmsip/buttonC"), "f", 'buttonC', true)
o2_method_new(full("/cmsip/buttonD"), "f", 'buttonD', true)
o2_method_new(full("/cmsip/sliderA"), "f", 'sliderA', true)
o2_method_new(full("/cmsip/sliderB"), "f", 'sliderB', true)
o2_method_new(full("/cmsip/sliderC"), "f", 'sliderC', true)
o2_method_new(full("/cmsip/sliderD"), "f", 'sliderD', true)
o2_method_new(full("/cmsip/checkW"), "f", 'checkW', true)
o2_method_new(full("/cmsip/checkX"), "f", 'checkX', true)
o2_method_new(full("/cmsip/checkY"), "f", 'checkY', true)
o2_method_new(full("/cmsip/checkZ"), "f", 'checkZ', true)
o2_method_new(full("/cmsip/canvas"), "fff", 'canvas', true)

### touchosc.srp OSC messages are redirected to /p3, e.g.
### /p3/1/fader5, so install some handlers here (this is not
### a complete set -- use osc_monitor.srp or TouchOSC 
### documentation to find more addresses used by TouchOSC).
o2_method_new(full("/1/toggle1"), "f", 'buttonA', true)
o2_method_new(full("/1/toggle2"), "f", 'buttonB', true)
o2_method_new(full("/1/toggle3"), "f", 'buttonC', true)
o2_method_new(full("/1/toggle4"), "f", 'buttonD', true)
o2_method_new(full("/1/fader1"), "f", 'sliderA', true)
o2_method_new(full("/1/fader2"), "f", 'sliderB', true)
o2_method_new(full("/1/fader3"), "f", 'sliderC', true)
o2_method_new(full("/1/fader4"), "f", 'sliderD', true)
o2_method_new(full("/2/push1"), "f", 'checkW', true)
o2_method_new(full("/2/push2"), "f", 'checkX', true)
o2_method_new(full("/2/push3"), "f", 'checkY', true)
o2_method_new(full("/2/push4"), "f", 'checkZ', true)


// osc server functions. Put your code inside the functions
def buttonA(timestamp, address, types, val):
    display "server button A", address, val
def buttonB(timestamp, address, types, val):
    display "server button B", address, val
def buttonC(timestamp, address, types, val):
    display "server button C", address, val    
def buttonD(timestamp, address, types, val):
    display "server button D", address, val
def sliderA(timestamp, address, types, val):
    display "server slider A", address, val
def sliderB(timestamp, address, types, val):
    display "server slider B", address, val
def sliderC(timestamp, address, types, val):
    display "server slider C", address, val    
def sliderD(timestamp, address, types, val):
    display "server slider D", address, val
def checkW(timestamp, address, types, val)
    display "server checkbox W", address, val
def checkX(timestamp, address, types, val)
    display "server checkbox X", address, val
def checkY(timestamp, address, types, val)
    display "server checkbox Y", address, val
def checkZ(timestamp, address, types, val)
    display "server checkbox Z", address, val
def canvas(timestamp, address, types, x, y, status)
    display "server canvas", address, x, y, status

def run()
    while true
        o2_poll()
        time_sleep(0.01)

run()

