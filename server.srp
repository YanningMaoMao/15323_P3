# File : server.srp
# Author : Yanning Mao (yanningm) <yanningm@andrew.cmu.edu>
# Description:
# This file contains an OSC Server which plays some randomly generated music.
# The OSC by default listens on port 8001. The server has a set of handlers,
# which handle the operations from the Clients.

require "canvas"
require "constants"
require "choir"

# the Choir object that generates some random music
var choir

# make a full path with SERVICE prefix
def full(osc_path):
    # make a full O2 path based on SERVICE
    return "/" + SERVER_SERVICE + osc_path

# install the handlers
def install_handlers():
    print "Installing handlers ..."
    # handlers for Choir
    install_handlers_for_choir()
    # handlers for Tracks
    install_handlers_for_tracks()

def install_handlers_for_choir():
    # the button that stops all sound tracks
    o2_method_new(full("/stopAllButton"), "f", 'stop_all_button_handler', true)
    # the button that starts all sound tracks
    o2_method_new(full("/startAllButton"), "f", 'start_all_button_handler', true)
    # the slider that controls the period
    o2_method_new(full("/periodSlider"), "f", 'period_slider_handler', true)

def install_handlers_for_tracks():
    for i = 0 to num_tracks:
        # the button that stops the sound track
        o2_method_new((full("/stopTrackButton") + "/" + str(i)), "f",
                                    'stop_track_handler', true)
        # the button that starts the sound track
        o2_method_new((full("/startTrackButton") + "/" + str(i)), "f",
                                    'start_track_handler', true)
        # the button that raises the octave of the sound track
        o2_method_new((full("/octaveUpTrackButton") + "/" + str(i)), "f",
                                    'octave_up_track_button_handler', true)
        # the button that lowers the octave of the sound track
        o2_method_new((full("/octaveDownTrackButton") + "/" + str(i)), "f",
                                    'octave_down_track_button_handler', true)
        # the slider that controls the volume of the track
        o2_method_new((full("/velocityTrackSlider") + "/" + str(i)), "i",
                                    'velocity_track_slider_handler', true)



def stop_all_button_handler(timestamp, address, types, val):
    choir.stop_all()

def start_all_button_handler(timestamp, address, types, val):
    choir.start_all()

def period_slider_handler(timestamp, address, types, val):
    choir.set_period(val)

def stop_track_handler(timestamp, address, types, val):
    track_idx = int(address[len(address) - 1])
    choir.tracks[track_idx].stop()

def start_track_handler(timestamp, address, types, val):
    track_idx = int(address[len(address) - 1])
    choir.tracks[track_idx].start()

def octave_up_track_button_handler(timestamp, address, types, val):
    track_idx = int(address[len(address) - 1])
    choir.tracks[track_idx].octave_up()

def octave_down_track_button_handler(timestamp, address, types, val):
    track_idx = int(address[len(address) - 1])
    choir.tracks[track_idx].octave_down()

def velocity_track_slider_handler(timestamp, address, types, val):
    track_idx = int(address[len(address) - 1])
    choir.tracks[track_idx].set_velocity(int(val))

# opens an OSC port to listen on it
def open_port():

    # use the input port number if given
    if len(command_line_arguments) > 1 and isdigit(command_line_arguments[1])
        osc_port = int(command_line_arguments[1])

    rslt = o2_osc_port_new(SERVER_SERVICE, osc_port, false)
    # an error occurred
    if rslt != 0
        display "in osc monitor, o2_osc_port_new returned ERROR", rslt
    else
        print "Listening on port ", osc_port

# makes O2 run
def runit():
    o2_poll()
    sched_cause(0.2, nil, 'runit')

# the main function
# initializes the scheduler, creates the Choir object which produces the music
# initializes O2, and downloads the handlers
def main():
    
    # initialize the scheduler
    sched_init()

    # open midi output
    prefs = Prefs("./prefs.txt")
    midi_devices = Midi_devices(prefs, open_later = true)
    success = midi_devices.open_midi(latency = 10, device = 'midi_out_device')

    # check output device
    if not success
        print "PLEASE SELECT A VALID OUTPUT DEVICE AND RESTART THIS PROGRAM"
        return

    # sets the frame
    default_window.set_size(window_width, window_height)

    # initializes the music
    choir = Choir()
    # initializes the canvas
    p2Canvas = MusicCanvas(default_window, canvas_margin, canvas_margin,
                            canvas_width, canvas_height)
    p2Canvas.take_plugin(choir)

    sched_select(vtsched)
    sched_set_period(init_period)
    # starts the music
    sched_cause(real_delay(5),
                choir.track_one, 'play', 0, choir.track_one.curr_pitch)
    sched_cause(real_delay(5),
                choir.track_two, 'play', 0, choir.track_two.curr_pitch)
    sched_cause(real_delay(5),
                choir.track_three, 'play', 0, choir.track_three.curr_pitch)
    sched_cause(real_delay(5),
                choir.track_four, 'play', 0, choir.track_four.curr_pitch)
    # starts the animation
    sched_cause(real_delay(5), p2Canvas, 'animate')

    # initializes the O2
    o2_initialize(APPLICATION, false)
    o2_service_new(SERVER_SERVICE)

    # set O2 clock
    o2_clock_set()
    open_port()

    # install handlers
    install_handlers()

    # run the O2
    sched_o2_enabled = true
    sched_cause(real_delay(5), nil, 'runit')


main()
