# File : main.srp
# Author : Yanning Mao (yanningm)
# Date : Feb 15, 2018
# Course : CMU 15-323 S18
#
# Description:
# 
# This file is a real-time program that outputs music using MIDI and generates
# corresponding image on the Canvas.
#
# --- Music Generation ---
# The music has four sound tracks, each with a different sound effect and a
# different set of pitches that will be played by that track. While playing,
# the track decides which pitch to play by randomly picking one pitch from the
# set of pitches belonging to it.
# Each track also has its own randomly generated rhythm. The rhythm is a cycle
# of 16 notes. The rhythm is generated by randomly deciding whether to play
# each of the 16 notes with probability half and half.
#
# --- Image Generation ---
# The program also generates image together with the music. For each track,
# there is a line representing the note being played. The height of the line
# corresponds to the pitch, and the color of the line corresponds to the
# volume. When the pitch is higher, the line jumps higher. When the volume is
# larger, the line becomes more red; when the volume is lower, the line becomes
# more yellow.
#
# --- Features ---
# For controlling the whole music, there is
# + a slider that controls the tempo
# + a start all button that starts all tracks
# + a stop all button that stops all tracks
# For controlling each track, there is
# + a slider that controls the volume of the track
# + a stop button that stops the track
# + a start button that starts the track
# + an octave up button that raises all pitches of the track by one octave
# + an octave down button that lowers all pitches of the track by one octave
#

require "choir"
require "canvas"
require "constants"

# main sets up the window, initiates the scheduler, then starts the music and
# the animation
def main():

    # initialize the scheduler
    sched_init()

    # open midi output
    prefs = Prefs("./prefs.txt")
    midi_devices = Midi_devices(prefs, open_later = true)
    success = midi_devices.open_midi(latency = 10, device = 'midi_out_device')

    # check output device
    if not success
        print "PLEASE SELECT A VALID OUTPUT DEVICE AND RESTART THIS PROGRAM"
        return

    # sets the frame
    default_window.set_size(window_width, window_height)

    # initializes the music
    choir = Choir()
    # initializes the canvas
    p2Canvas = MusicCanvas(default_window, canvas_margin, canvas_margin,
                            canvas_width, canvas_height)
    p2Canvas.take_plugin(choir)

    sched_select(vtsched)
    sched_set_period(choir.period_slider.value())
    # starts the music
    sched_cause(real_delay(5),
                choir.track_one, 'play', 0, choir.track_one.curr_pitch)
    sched_cause(real_delay(5),
                choir.track_two, 'play', 0, choir.track_two.curr_pitch)
    sched_cause(real_delay(5),
                choir.track_three, 'play', 0, choir.track_three.curr_pitch)
    sched_cause(real_delay(5),
                choir.track_four, 'play', 0, choir.track_four.curr_pitch)
    # starts the animation
    sched_cause(real_delay(5), p2Canvas, 'animate')


# runs the program
display "calling main at", time_get()
main()


