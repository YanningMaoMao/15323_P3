# midi-io -- midi i/o for serpent and wxserpent (not Aura) programs
#            implements API from API.txt
# EXTENDED TO ALLOW VARIABLE LATENCY SPEC AT RUN-TIME
#
# Call midi_out.set_latency(n) to change latency by n ms. The default latency
# is 100ms, so if you call midi_out.start() with no latency keyword, PortMidi
# will get latency=100, which means PortMidi will add 100ms to all timestamps,
# which in midi_out are based on the ideal (logical) event time. Thus, you can
# be running up to 100ms late and forward-synchronous timing will compensate.
#
# When you call midi_out.set_latency(n), you tell midi_out to offset the
# timestamps from the ideal (logical) time by n ms. Positive n makes MIDI
# output later. Negative n makes MIDI go earlier, but you obviously cannot
# go earlier than real time, so n < -100 makes no sense. The time advance
# becomes 100 + n, so negative values of n reduce the ability to compensate
# when you fall behind schedule.
#
# Negative values of n CAN COMPENSATE FOR SYNTHESIZER DELAY, which is why
# we have this feature. THE INTENDED OPERATION is that you adjust n by
# ear (interactively with a slider) to make your synthesized sounds
# synchronize with other synthesizers connected to other computers.
#
# after loading, call
# midi_out.start(latency = 0, midi_out_dev = midi_out_default()) to
# initialize midi output. Of course, keyword parameters are optional.
# Specification of "latency" is discouraged. Note that if you use
# mididevice.srp (a good idea), you DO need to pass in a latency=100
# because mididevice's default latency setting is zero.
#
# Midi output is invoked by calling methods on midi_out. These all assume
# that you are running inside a scheduler and use timestamps for accurate
# timing (assuming that computation is not further than latency ms behind
# schedule.
#
# Midi input is processed automatically as follows:
#    - midi_in is defined (but must be started to get input)
#    - loading this file will initialize midi_in, after which
#      sched will call midi_in.poll() periodically to check for input
#    - any input results in a method call that is passed along a
#      chain of Midi_handler instances
#    - midi_handler is initially an instance of Midi_handler_default, 
#      which just prints messages when MIDI arrives.
# Subclass Midi_handler and if there is an init() method, be sure it
# calls super.init(). This will give your instance priority -- it gets
# all incoming MIDI (if you do not call super.init(), your instance will
# not be installed in the chain of handlers and it will not receive any
# MIDI data. If your handler wants to delegate MIDI to another handler,
# e.g. your Midi_handler subclass overrides noteon, but it only wants
# to handler noteon messages on channel 1, then call super.noteon(),
# which will pass the message on to the next handler in the chain.
#
# The end of the chain is a Midi_handler_default which prints otherwise
# unhandled messages. To avoid printing, just call 
#    midi_handler_default.finish()
# which will remove the default handler from the end of the handler
# chain.
#
# For MIDI THRU, that is, send input to output, do this:
#    midi_handler_default.finish() # uninstall default handler
#    Midi_handler_thru() # install "thru" handler
# If you do this AFTER other handlers are created, MIDI input will be
# sent to midi_out AND the input will be passed to other handlers.
# If you do this BEFORE other handlers are created, this handler will
# only send what it gets to midi_out. If other handlers get the data
# first and do not call super.noteon(chan, pitch, vel), etc. to pass
# the message down the chain, then what happens is entirely up to the
# handler that gets the message.

# You must bracket midi output calls between rtsched.start_use() and
# rtsched.finish_use() to send output that it not caused directly or
# indirectly by a scheduled event. This will establish a logical
# execution time on which timestamps can be based.
#
# Usually, midi output IS in fact scheduled directly or indirectly using
# a scheduler's cause() method. In these cases, you do not need to call
# rtsched.start_use() or rtsched.finish_use().
#
# Rather than calling midi_in.start() or midi_out.start(), in wxserpent
# you can load mididevice.srp which will automatically initialize midi
# devices and provide a menu interface to select devices.
#
# To avoid stuck notes and cutoff notes due to getting note-ons and
# note-offs reversed, keep a count of how many notes are logically on
# for each channel/key combination. When the count goes to zero, turn
# the note off. If the count goes positive, turn the note on. If the
# count is positive and you get a note-on, turn the note off and on.
# If the count is >1 and you get a note-off, do nothing.


require "debug"
require "sched"

midi_note_on_count = 0
midi_note_off_count = 0

LATENCY = 100 // default latency for PortMidi (overridden by mididevice.srp)

midi_status_noteoff = 0x80
midi_status_noteon = 0x90
midi_status_poly_touch = 0xA0
midi_status_control = 0xB0
midi_status_program = 0xC0
midi_status_touch = 0xD0
midi_status_pitchbend = 0xE0
// standard controller numbers
midi_bank_lsb = 32
midi_bank_msb = 0
midi_alloff = 0x7B
midi_control_sustain = 64
midi_control_mod_wheel = 1
midi_control_breath = 2
midi_control_volume = 7
midi_control_pedal = 64 // damper (sustain) pedal

midi_trace = nil

def print_midi_device_info(id)
    var info = midi_get_device_info(id)
    print info


def secs_to_tick(s)
    int(s * 1000)


def midi_data(x)
    # convert x (0-1) to midi data (0-127)
    round(x * 127, 0)


class Midi_out
    var port // midi output port
    var pmlatency // remember the latency added by portmidi
                  // (should be read-only to clients)
    var latency // additional time offset to compensate for synthesizer latency
    // when you call note_on(), actual output time will be 
    //    rtsched.get_tick() + latency + pmlatency
    // (or now if the timestamp is already in the past)
    var state; // note-on count for each (chan,key) combination

    def init()
        latency = 0
        // state for chan, key is state[key + chan * 128]
        state = [0 for i = 0 to 16 * 128];

    def set_latency(n)
        latency = n

    // send a note-on to port
    //     schedule a note-off (set dur to nil to avoid note-off)
    //     (also if vel is zero, no note-off is scheduled)
    //
    def note(chan, key, vel, dur)
        if midi_trace
            print "midi note: dur "; dur; ": "
        note_on(chan, key, vel)
        if vel > 0 and dur
            sched_cause(dur, this, 'note_on', chan, key, 0)


    def note_on(chan, key, loud):
        var ticks = rtsched.get_tick() + latency
        if midi_trace
            display "midi note_on", ticks, chan, key, loud
        chan = chan & 15
        key = key & 127
        var i = key + chan * 128;
        var count = state[i]
        if port
            if loud > 0 and count > 0 // retrigger existing note
                midi_write(port, ticks, 
                           chr(midi_status_noteon + chan) + chr(key) + chr(0))
            // case 1: loud > 0 - note on: always send it
            // case 2: loud == 0 - note off: only send if state is 1
            if loud > 0 or count == 1
                midi_write(port, ticks,
                        chr(midi_status_noteon + chan) + chr(key) + chr(loud))
            // see wxs_sched_poll in sched.srp to see how this is used. Comment it out if you do not need it
            smallest_time_advance = min(ticks + pmlatency - int(time_get() * 1000), smallest_time_advance)
        if loud > 0:
            midi_note_on_count = midi_note_on_count + 1
            state[i] = count + 1
        elif count > 0:
            midi_note_off_count = midi_note_off_count + 1
            state[i] = count - 1


    def program(chan, program, optional bank_lsb, bank_msb)
        var ticks = rtsched.get_tick() + latency
        if midi_trace
            display "midi program", chan, program, bank_lsb, bank_msb
        chan = chan & 15
        if port
            if bank_msb
                midi_write(port, ticks, chr(midi_status_control + chan) + 
                                      chr(midi_bank_msb) + chr(bank_msb))
            if bank_lsb
                midi_write(port, ticks, chr(midi_status_control + chan) + 
                                      chr(midi_bank_lsb) + chr(bank_lsb))
            midi_write(port, ticks, chr(midi_status_program + chan) + 
                                      chr(program) )

    // send MIDI alloff messages to all channels. If optional hard is true,
    //   also send individual note-offs to all 2048 possible addresses
    //   (If synthesizer has two note instances playing on the same chan
    //   and key, you are out of luck -- only one note-off is sent).
    //   state[] is all reset to zeros (no notes playing)
    //
    def alloff(optional hard):
        var ticks = rtsched.get_tick() + latency
        if midi_trace
            display "midi alloff", ticks, port
        if port
            for chan = 0 to 16:
                midi_write(port, ticks, chr(midi_status_control + chan) + 
                                    chr(midi_alloff) + chr(0))
                for key = 0 to 128:
                    if hard // "hard" alloff means send individual note-offs
                        state[key + chan * 128] = 1 // 1 immediately set to 0
                        note_on(chan, key, 0)       // by this note-off
                    else // no note-off, just reset state
                        state[key + chan * 128] = 0


    def channel_message(status, chan, data1, data2):
        var ticks = rtsched.get_tick() + latency
        if midi_trace
            display "midi channel_message", ticks, hex(status), chan, data1, data2
        if port
            # send 3-byte midi message for a given channel
            chan = chan & 15
            data1 = min(127, max(0, data1))
            data2 = min(127, max(0, data2))
            midi_write(port, ticks,
                       chr(status + chan) + chr(data1) + chr(data2))
    
    
    def channel_message_2(status, chan, data):
        var ticks = rtsched.get_tick() + latency
        if midi_trace
            display "midi channel_message_2", ticks, hex(status), chan, data
        if port
            # send a 2-byte midi message for a given channel
            //display "midi channel_message_2", midi, status, chan, data
            chan = chan & 15
            data = min(127, max(0, data))
            midi_write(port, ticks, chr(status + chan) + chr(data))
    

    // pitch_bend -- bend parameter goes from -8192 to +8191
    def pitch_bend(chan, bend):
        bend = bend + 8192
        channel_message(midi_status_pitchbend, chan, bend % 128, bend >> 7)

    
    def chan(byte)
        byte & 0xF
    
    
    def start(keyword latency = LATENCY, keyword midi_out_dev)
        if port != nil
            return
        var dev = midi_out_dev
        if not dev:
            dev = midi_out_default()
        if dev != -1:
            port = midi_create()
            display "midi_open_output", port, dev, latency
            pmlatency = latency // remember how we opened portmidi output
            var err = midi_open_output(port, dev, 100, latency)
            if err != 0:
                print "Error opening MIDI output:", err
                return false
            else:
                 print "Opened MIDI out device successfully:", dev, 
                 print "latency", latency
                 print_midi_device_info(dev)
        else:
            print "No MIDI output device opened";
            if midi_out_dev == -1:
                print " by request or preference setting."
            else:
                print ". There appears to be no output device."
            return false
        return t


    def finish()
        if port == nil
            return
        midi_close(port)
        port = nil



class Midi_in
    var port
    var timestamp

    def start(keyword buffer_size = 100, keyword midi_in_dev)
        print "Called start() in Midi_in; midi_in_dev: ", midi_in_dev
        if port != nil
            return
        var dev = midi_in_dev
        if not midi_in_dev:
            dev = midi_in_default()
        if dev != -1:
            port = midi_create()
            if not buffer_size:
                buffer_size = 100
            if midi_open_input(port, dev, buffer_size) != 0:
                display "midi in error", port, dev
                port = nil
                return false
            else:
                print "Opened MIDI in device successfully:", dev
                print_midi_device_info(dev)
        else:
            print "No MIDI input device opened";
            if midi_in_dev == -1:
                print " by request or preference setting."
            else:
                print ". There appears to be no input device."
            return false
        return t


    def poll()
        if not port
            return
        var msg = midi_read(midi_in.port)
        while msg:
            if not midi_handler:
                return
            timestamp = msg[0]
            msg = msg[1]
            # doesn't seem to be important -- this would affect things if
            # scheduler is behind, but then would this even get called?
            # if timestamp > RNOW
            #    rtsched.update_ticks(timestamp)
            var status = ord(msg[0])
            var cmd = status & 0xF0
            var channel = status & 0xF
            var data1 = ord(msg[1])
            var data2 = ord(msg[2])
            if cmd == midi_status_noteon:
                if data2 > 0
                    midi_handler.noteon(channel, data1, data2)
                else
                    midi_handler.noteoff(channel, data1, data2)
            elif cmd == midi_status_noteoff:
                midi_handler.noteoff(channel, data1, data2)
            elif cmd == midi_status_control:
                midi_handler.control(channel, data1, data2)
            elif cmd == midi_status_poly_touch:
                midi_handler.poly_touch(channel, data1, data2)
            elif cmd == midi_status_touch:
                midi_handler.touch(channel, data1)
            elif cmd == midi_status_program:
                midi_handler.program(channel, data1)
            elif cmd == midi_status_pitchbend:
                midi_handler.bend(channel, data2 << 7 + data1 - 8192)
            else
                display "unhandled", hex(cmd), channel, data1, data2
            //msg = mdii_read(midi_in.port) 
            msg = midi_read(midi_in.port)   


    def finish()
        if port == nil
            return
        midi_close(port)
        port = nil


// Midi_handler should be subclassed by application
class Midi_handler
    var next_handler

    def init()
        # put this handler at the front, takes priority
        # next_handler will point to the next handler if
        # any.
        activate()

    def activate() # add this handler to chain of handlers
        if not next_handler
            next_handler = midi_handler
        midi_handler = this # we get first crack at MIDI messages

    def finish() # call this to remove handler from chain of handlers
        if midi_handler
            if this == midi_handler
                midi_handler = next_handler
            else
                midi_handler.remove_handler(this)
        next_handler = nil

    def remove_handler(mh) # internal recursive remove from list
        if mh == next_handler
            next_handler = mh.next_handler
        else
            next_handler.remove_handler(mh)

    # default action unless you override is to pass message
    # on to the next handler in the chain
    def noteon(chan, pitch, vel)
        if next_handler:
            next_handler.noteon(chan, pitch, vel)
    def noteoff(chan, pitch, vel)
        if next_handler:
            next_handler.noteoff(chan, pitch, vel)
    def control(chan, cnum, val)
        if next_handler:
            next_handler.control(chan, cnum, val)
    def poly_touch(chan, key, val)
        if next_handler:
            next_handler.poly_touch(chan, key, val)
    def touch(chan, val)
        if next_handler:
            next_handler.touch(chan, val)
    def program(chan, val)
        if next_handler:
            next_handler.program(chan, val)
    def bend(chan, val)
        if next_handler:
            next_handler.bend(chan, val)


# default Midi_handler: prints messages
#
class Midi_handler_default (Midi_handler)
    def noteon(chan, pitch, vel)
        display "keydown", chan, pitch, vel
    def noteoff(chan, pitch, vel)
        display "keyup", chan, pitch, vel
    def control(chan, cnum, val)
        display "control", chan, cnum, val
    def poly_touch(chan, key, val)
        display "poly_touch", chan, key, val
    def touch(chan, val)
        display "touch", chan, val
    def program(chan, val)
        display "program", chan, val
    def bend(chan, val)
        display "pitchbend", chan, val


# alternate "default" handler -- pass everything to output
# probably you should start midi_out with latency = 0 to use this
#
class Midi_handler_thru (Midi_handler)
    def noteon(chan, pitch, vel)
        sched_select(rtsched)
        midi_out.note_on(chan, pitch, vel)
        super.noteon(chan, pitch, vel)
    def noteoff(chan, pitch, vel):
        sched_select(rtsched)
        midi_out.note_on(chan, pitch, 0)
        super.noteoff(chan, pitch, vel)
    def control(chan, cnum, val)
        sched_select(rtsched)
        midi_out.channel_message(midi_status_control, chan, cnum, val)
        super.control(chan, cnum, val)
    def poly_touch(chan, key, val)
        sched_select(rtsched)
        midi_out.channel_message(midi_status_poly_touch, chan, key, val)
        super.poly_touch(chan, key, val)
    def touch(chan, val)
        sched_select(rtsched)
        midi_out.channel_message_2(midi_status_touch, chan, val)
        super.touch(chan, val)
    def program(chan, val)
        sched_select(rtsched)
        midi_out.program(chan, val)
        super.program(chan, val)
    def bend(chan, val)
        sched_select(rtsched)
        midi_out.pitch_bend(chan, val)
        super.bend(chan, val)


midi_in = Midi_in()
// midi_handler should be redefined by application
midi_handler = nil
# create a default MIDI handler for unhandled messages
midi_handler_default = Midi_handler_default()
midi_out = Midi_out()

