# File : server.srp
# Author : Yanning Mao (yanningm)
# Date : March 2, 2018
# Course : CMU 15-323 S18
#
# Description:
# 
# This file is a real-time program that outputs music using MIDI and generates
# corresponding image on the Canvas.
#
# --- Music Generation ---
# The music has four sound tracks, each with a different sound effect and a
# different set of pitches that will be played by that track. While playing,
# the track decides which pitch to play by randomly picking one pitch from the
# set of pitches belonging to it.
# Each track also has its own randomly generated rhythm. The rhythm is a cycle
# of 16 notes. The rhythm is generated by randomly deciding whether to play
# each of the 16 notes with probability half and half.
#
# --- Image Generation ---
# The program also generates image together with the music. For each track,
# there is a line representing the note being played. The height of the line
# corresponds to the pitch, and the color of the line corresponds to the
# volume. When the pitch is higher, the line jumps higher. When the volume is
# larger, the line becomes more red; when the volume is lower, the line becomes
# more yellow.
#
# --- Features ---
# For controlling the whole music, there is
# + a slider that controls the tempo
# + a start all button that starts all tracks
# + a stop all button that stops all tracks
# For controlling each track, there is
# + a slider that controls the volume of the track
# + a stop button that stops the track
# + a start button that starts the track
# + an octave up button that raises all pitches of the track by one octave
# + an octave down button that lowers all pitches of the track by one octave
#
# require "choir"
# require "canvas"

require "constants"

def init():
	# sched_o2_enabled = true
	print "here1"
	# init_project()
	print "here2"
	# install_handlers()
	print "here3"
	init_osc()
	print "here4"

def init_osc():

	# initialize the OSC
	o2_initialize(APPLICATION, false)
	o2_service_new(SERVER_SERVICE)
	o2_clock_set()

	# use the input port number if given
	if len(command_line_arguments) > 1 and isdigit(command_line_arguments[1])
		osc_port = int(command_line_arguments[1])

	# open the port 
	rslt = o2_osc_port_new(SERVER_SERVICE, osc_port, false)
	if rslt != 0
		print "OSC Server failed to open port on ", osc_port
	else
		print "OSC Server listening for OSC messages on port ", osc_port

	return

init()


